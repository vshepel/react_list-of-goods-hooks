{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","DEFAULT","sortField","setSortField","sortReversed","setSortReversed","visibleGoods","goods","preparedGoods","ALPHABET","sort","a","b","localeCompare","LENGTH","length","reverse","getPreparedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,WAAAA,E,oBAAAA,E,iBAAAA,M,KAmCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAAmBH,EAASI,SAA9D,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCH,oBAAS,GAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KACMC,EA3BR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,aAEPI,EAAa,YAAOD,GAE1B,OAAQL,GACN,KAAKL,EAASY,SACZD,EAAcE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC7C,MACF,KAAKf,EAASiB,OACZN,EAAcE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAU9C,OAJIX,GACFI,EAAcQ,UAGTR,EAMcS,CACnBnB,EACA,CAAEI,YAAWE,iBAQf,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SAAU,UACV,CAAE,WAAYlB,IAAcL,EAASY,WAEvCY,QAAS,kBAAMlB,EAAaN,EAASY,WANvC,iCAWA,wBACEU,KAAK,SACLD,UAAWE,IACT,SAAU,aACV,CAAE,WAAYlB,IAAcL,EAASiB,SAEvCO,QAAS,kBAAMlB,EAAaN,EAASiB,SANvC,4BAWA,wBACEK,KAAK,SACLD,UAAWE,IACT,SAAU,aACV,CAAE,YAAahB,IAEjBiB,QAAS,kBAAMhB,GAAiBD,IANlC,sBAWEF,GAAaE,IACb,wBACEe,KAAK,SACLD,UAAU,4BACVG,QA7CI,WACZlB,EAAaN,EAASI,SACtBI,GAAgB,IAwCV,sBAUJ,6BACGC,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCjHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.98c913e9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  DEFAULT = '',\n  ALPHABET = 'alphabet',\n  LENGTH = 'length',\n}\n\ninterface FilterParams {\n  sortField: SortType;\n  sortReversed: boolean;\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortField, sortReversed }: FilterParams,\n) {\n  const preparedGoods = [...goods];\n\n  switch (sortField) {\n    case SortType.ALPHABET:\n      preparedGoods.sort((a, b) => a.localeCompare(b));\n      break;\n    case SortType.LENGTH:\n      preparedGoods.sort((a, b) => a.length - b.length);\n      break;\n    default:\n      break;\n  }\n\n  if (sortReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<SortType>(SortType.DEFAULT);\n  const [sortReversed, setSortReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    { sortField, sortReversed },\n  );\n\n  const reset = () => {\n    setSortField(SortType.DEFAULT);\n    setSortReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button', 'is-info',\n            { 'is-light': sortField !== SortType.ALPHABET },\n          )}\n          onClick={() => setSortField(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button', 'is-success',\n            { 'is-light': sortField !== SortType.LENGTH },\n          )}\n          onClick={() => setSortField(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button', 'is-warning',\n            { 'is-light': !sortReversed },\n          )}\n          onClick={() => setSortReversed(!sortReversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || sortReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}